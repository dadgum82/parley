paths:
  /users:
    get:
      tags:
        - User
      summary: Gets a list of all users in JSON format
      description: >
        A detailed description of the operation.
        Use markdown for rich text representation,
        such as **bold**, *italic*, and [links](https://swagger.io).
      operationId: getUsers
      responses:
        '200':
          description: A JSON array of user names
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '../schemas/user.yaml#/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '../schemas/common.yaml#/Error'
    post:
      tags:
        - User
      summary: Add a new user to the database
      operationId: createUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/NewUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '../schemas/user.yaml#/User'
        '400':
          description: The name is null or empty
          content:
            application/json:
              schema:
                $ref: '../schemas/common.yaml#/Error'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '../schemas/common.yaml#/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '../schemas/common.yaml#/Error'

  /users/{id}:
    get:
      tags:
        - User
      summary: Gets a user by ID.
      description: >
        A detailed description of the operation.
        Use markdown for rich text representation,
        such as **bold**, *italic*, and [links](https://swagger.io).
      operationId: getUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '../schemas/user.yaml#/User'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '../schemas/common.yaml#/Error'
    put:
      tags:
        - User
      summary: Update an existing user
      operationId: updateUserById
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          application/json:
            schema:
              $ref: '../schemas/user.yaml#/NewUser'
      responses:
        '200':
          description: Updated
          content:
            application/json:
              schema:
                $ref: '../schemas/user.yaml#/User'
        '405':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '../schemas/common.yaml#/Error'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '../schemas/common.yaml#/Error'
  /users/{id}/avatar:
    get:
      tags:
        - User
      summary: Get the avatar for a user. The file format is *PNG.*
      operationId: getUserAvatar
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Avatar retrieved successfully
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
        '400':
          description: Bad request
    post:
      tags:
        - User
      summary: Set the avatar for a user
      operationId: setUserAvatar
      parameters:
        - name: id
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '200':
          description: Avatar set successfully
        '400':
          description: Bad request
  /users/{userId}/chatrooms:
    get:
      tags:
        - User
        - ChatRoom
      summary: Gets all chat rooms for a specific user
      operationId: getChatRoomsByUserId
      parameters:
        - name: userId
          in: path
          description: User ID
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: List of chat rooms the user is enrolled in
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '../schemas/chatroom.yaml#/ChatRoom'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '../schemas/common.yaml#/Error'